package com.ex.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.ex.data.BoardDTO;
import com.ex.service.BoardService;

import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/board/*")	// http://localhost:8080/board/*
@RequiredArgsConstructor
public class BoardController {
	
	private final BoardService boardService;

	@GetMapping("list")
	public String list(Model model, @RequestParam(name="pageNum", defaultValue="1") int pageNum) {
		int pageSize=10;
		int currentPage = pageNum;
		int start = (currentPage -1) * pageSize +1;
		int end = currentPage * pageSize;
		int count = boardService.count();
		
		List<BoardDTO> list = null;
		if( count > 0 ) {
			list = boardService.list(start, end);
		}else {
			list = Collections.emptyList();
		}
		
		int pageCount = count/pageSize +(count%pageSize == 0?0:1);
		int startPage = (int)((currentPage -1)/10)* 10 +1;
		int pageBlock = 10;
		int endPage = startPage+pageBlock -1;
		if( endPage > pageCount ) {
			endPage = pageCount;
		}
		
		model.addAttribute("pageCount", pageCount);
		model.addAttribute("startPage", startPage);
		model.addAttribute("pageBlock",pageBlock);
		model.addAttribute("endPage", endPage);
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("pageNum", pageNum);
		model.addAttribute("start",start);
		model.addAttribute("end", end);
		model.addAttribute("count", count);
		model.addAttribute("list", list);
		
		return "board/list";
	}
	
	@GetMapping("write")
	public String writeForm( BoardDTO boardDTO ) {
		return "board/write";
	}
	
	@PostMapping("write")
	public String writePro(BoardDTO boardDTO) {
		boardService.insert(boardDTO);
		return "redirect:/board/list";
	}
	
	@GetMapping("content")
	public String Content(@RequestParam("num") int num, @RequestParam("pageNum") int pageNum, Model model) {
		BoardDTO boardDTO = boardService.content(num);
		model.addAttribute("dto", boardDTO);
		model.addAttribute("pageNum", pageNum);
		return "board/content";
	}
/*	num / pageNum
	둘 다 클라이언트가 HTTP 요청 파라미터로 전달하는 값

@RequestParam	: num 이 적합		
	DB에서 해당 글의 데이터를 조회해야 함
	Controller → Service → Mapper 로 전달되어 로직에 직접 사용됨

@ModelAttribute	: pageNum이 적합	
	View에서 페이징 유지용으로 model에 자동 저장하기 위함
	
	@GetMapping("content")
	public String content(@RequestParam("num") int num , Model model,
						  @ModelAttribute("pageNum") int pageNum ) {
		model.addAttribute("myBoardDTO", boardService.boardContent(num));
		return "board/content";
	}
*/
	// 수정/삭제 클릭 후 비밀번호 확인 page
	@GetMapping("inputPw")
	public String updatePw(@ModelAttribute("num") int num, @ModelAttribute("pageNum") int pageNum) {
		return "board/pwCheck";
	}
	
	// pw 입력 후 [글수정] 클릭
	@PostMapping("update1")
	public String updateForm(@RequestParam("pw") String pw, @RequestParam("num") int num, Model model, @ModelAttribute("pageNum") int pageNum) {
		// 1. pw 확인, 2. dto 기존 정보 보여주기, 3. 비밀번호 일치/불일치 결과
		boolean pwResult = false;
		BoardDTO boardDTO = null;
		int result = 0;	// 비밀번호 불일치, view 에서 사용할 값
		// 입력 pw와 DB의 pw 값 비교
		pwResult = boardService.pwCheck(num, pw);
		if( pwResult == true ) {	// 비밀번호 일치
			boardDTO = boardService.upContent(num);	// 글번호에 해당하는 모든 정보 가져오기
			result = 1;	// 비밀번호 일치
			model.addAttribute("result", result);
			model.addAttribute("dto", boardDTO);
		}
		model.addAttribute("result", result);
		return "board/updateForm";
	}

	// 찐 정보 수정
	@PostMapping("update2")
	public String updatePro(BoardDTO boardDTO, Model model, @ModelAttribute("pageNum") int pageNum) {
		int result = boardService.update(boardDTO);
		model.addAttribute("result", result);
		return "board/updatePro";
	}
	
	// pw 입력 후 [글삭제] 클릭
	@PostMapping("delete")
	public String delete( @ModelAttribute("pageNum") int pageNum, 
						@RequestParam("pw") String pw, 
						@RequestParam("num") int num, Model model) {
		// 1.비밀번호 확인,  2.DB 삭제,  3.삭제 결과 delete.html 보냄
		boolean pwResult = false;
		int result = 0;
		pwResult = boardService.pwCheck(num, pw);
		if( pwResult == true ) {	// 비밀번호 일치
			result = boardService.delete(num);	// DB에서 글 삭제
		}
		// 1행이 삭제되었습니다. 의 1 
		model.addAttribute("result", result);
		return "board/delete";
	}
}